# ===================================================
# Assignment 1: Huffman Compression
# ===================================================
# Name: Ryan Sandoval
# ID: 1529017
# Course: CMPUT 274, FALL 2018

import bitio
import huffman
import pickle
import sys

# When true, if an error is encountered, will only print
# and exit, not raise an error
GRACEFUL_EXIT = True


def read_tree(tree_stream):
    '''Read a description of a Huffman tree from the given compressed
    tree stream, and use the pickle module to construct the tree object.
    Then, return the root node of the tree itself.

    Args:
      tree_stream: The compressed stream o read the tree from.

    Returns:
      A Huffman tree root constructed according to the given description.
    '''

    # Unserialize and return the node
    tree_root = pickle.load(tree_stream)
    return tree_root


def decode_byte(tree, bitreader):
    """
    Reads bits from the bit reader and traverses the tree from
    the root to a leaf. Once a leaf is reached, bits are no longer read
    and the value of that leaf is returned.

    Args:
      bitreader: An instance of bitio.BitReader to read the tree from.
      tree: A Huffman tree.

    Returns:
      Next byte of the compressed bit stream.
    """
    # Init
    current_node = tree.root

    # Read from bitreader until done
    bitsAccumulator = ""
    while True:
        try:
            bit = int(bitreader.readbit())
            bitsAccumulator += str(bit)

        except EOFError:
            # Happens iff no EOF was encoded.
            if GRACEFUL_EXIT:
                print("Error: No EOF encoding found")
                sys.exit(-1)
            else:
                raise RuntimeError("No EOF encoding in file")

        if bit == 0:
            current_node = current_node.left
        elif bit == 1:
            current_node = current_node.right
        else:
            if not GRACEFUL_EXIT:
                raise TypeError("Bitreader returned non-binary")
            else:
                print("Error: Bitreader returned non-binary")
                sys.exit(-1)

        # Condition for Done
        if isinstance(current_node, huffman.TreeLeaf):
            return current_node.value


def decompress(compressed, uncompressed):
    '''First, read a Huffman tree from the 'tree_stream' using your
    read_tree function. Then use that tree to decode the rest of the
    stream and write the resulting symbols to the 'uncompressed'
    stream.

    Args:
      compressed: A file stream from which compressed input is read.
      uncompressed: A writable file stream to which the uncompressed
          output is written.
    '''
    # Init
    if opened_binary(compressed, stream_name="Compressed"):
        comp_reader = bitio.BitReader(compressed)

    if opened_binary(uncompressed, stream_name="Uncompressed"):
        uncomp_writer = bitio.BitWriter(uncompressed)

    tree = read_tree(compressed)

    # Uncompress the compressed stream
    while True:
        uncomp_byte = decode_byte(tree, comp_reader)

        # Check if EOF marker
        if uncomp_byte is None:
            break

        uncomp_writer.writebits(uncomp_byte, 8)

    # Flush and then we're done
    uncomp_writer.flush()


def write_tree(tree, tree_stream):
    '''Write the specified Huffman tree to the given tree_stream
    using pickle.

    Args:
      tree: A Huffman tree.
      tree_stream: The binary file to write the tree to.
    '''
    pickle.dump(tree, tree_stream)


def compress(tree, uncompressed, compressed):
    '''First write the given tree to the stream 'tree_stream' using the
    write_tree function. Then use the same tree to encode the data
    from the input stream 'uncompressed' and write it to 'compressed'.
    If there are any partially-written bytes remaining at the end,
    write 0 bits to form a complete byte.

    Flush the bitwriter after writing the entire compressed file.

    Args:
      @param tree: A Huffman tree.
      uncompressed: A file stream from which you can read the input.
      compressed: A file stream that will receive the tree description
          and the coded input data.
    '''
    # Init
    if opened_binary(compressed, stream_name="Compressed"):
        comp_writer = bitio.BitWriter(compressed)
    if opened_binary(uncompressed, stream_name="Uncompressed"):
        uncomp_reader = bitio.BitReader(uncompressed)

    write_tree(tree, compressed)
    encoding_table = huffman.make_encoding_table(tree.root)

    try:
        while True:
            byte = uncomp_reader.readbits(8)

            # "to_write" is list of True or False
            to_write = encoding_table[byte]

            for bool in to_write:
                comp_writer.writebit(bool)

    except EOFError:
        # Write EOF encoding
        to_write = encoding_table[None]
        for bool in to_write:
                comp_writer.writebit(bool)

    finally:
        # Flush and we're done
        comp_writer.flush()


def opened_binary(file, stream_name="File", auto_exit=True):
    """
    Returns True if file stream opened in binary

    Args:
        file: file stream
        stream_name: File name to display in error
        auto_exit: If True, exits if not in binary

    Return:
        (boolean) True if file stream is binary
    """
    if file.mode.count("b") > 0:
        return True
    else:
        if auto_exit and GRACEFUL_EXIT:
            print(
                "File Mode Error: {} isn't in binary mode.".format(stream_name)
                )
            sys.exit(-1)
        else:
            raise RuntimeError("{} is not in binary mode.".format(stream_name))
        return False
