# ===================================================
# Assignment 1: Password Validator and Generator 
# ===================================================
# Name: Ryan Sandoval
# Course: CMPUT 274
# Section: LBL EA1

import re
import random
import string
import timeit

MIN_LENGTH = 8

def validate(password):
    """ Analyzes an input password to determine if it is "Secure", 
    "Insecure", or "Invalid" based on the assignment description 
    criteria.

    Arguments:
        password (string): a string of characters

    Returns:
        result (string): either "Secure", "Insecure", or "Invalid". 
    """
    
    start = timeit.default_timer()

    # Check if Invalid
    # ================

    if (len(password) < MIN_LENGTH):
        return("Invalid")

    # Check for invalid regex pattern
    invalidPattern = re.compile("[ _-]")
    if invalidPattern.search(password) != None:
        return("Invalid")

    # Check if Secure
    # =================

    # # Check for Uppercase Chars
    # upperCharPattern = re.compile(r"[A-Z]")
    # lowerCharPattern = re.compile(r"[a-z]")
    # decimalPattern = re.compile(r"[0-9]")
    # symbolPattern = re.compile(r"[!#$%&'()*+,./:;<=>?@[\]^`{|}~]")

    # patterns = [
    #     upperCharPattern,
    #     lowerCharPattern,
    #     decimalPattern,
    #     symbolPattern
    # ]

    # # Check if the password has a match with all the patterns in variable "patterns"
    # # If one pattern fails to match, the password is insecure
    
    # for pattern in patterns:
    #     if len(pattern.findall(password)) == 0:
    #         return("Insecure")

    patterns = [
        list(string.ascii_uppercase),
        list(string.ascii_lowercase),
        [0, 1,2,3,4,5,6,7,8,9],
        list(r"!#$%&'()*+,./:;<=>?@[\]^`{|}~")
    ]

    for pattern in patterns:
        for letter in list(password):
            if letter in pattern:
                match = True
                break
        if match: 
            continue
        return('Insecure')
    
    # If program got here, password passed
    stop = timeit.default_timer()
    print(stop - start)
    return("Secure")


def generate(n):
    """ Generates a password of length n which is guaranteed to 
    be Secure according to the given criteria.

    Arguments:
        n (integer): the length of the password to generate, n >= 8.

    Returns:
        secure_password (string): a Secure password of length n. 
    """

    # Each character type will make up roughly 1/4 of the password
    type = 0
    password = []
    symbols = r"!#$%&'()*+,./:;<=>?@[\]^`{|}~"

    if n < 8:
        raise ValueError("Argument 'n' must be 8 or greater")

    while (len(password) != n):

        # Generate Uppercase Char
        if type == 0:
            password.append(string.ascii_uppercase[random.randint(0, 25)])

        # Generate Lowercase Char
        elif type == 1:
            password.append(string.ascii_lowercase[random.randint(0, 25)])

        # Generate Decimal
        elif type == 2:
            password.append(str(random.randint(0, 9)))

        # Generate Symbol
        elif type == 3:
            index = random.randint(0, len(symbols) - 1)
            password.append(symbols[index])

        # Step up the type
        type = (type + 1) % 4
    
    # Shuffle the Password
    random.shuffle(password)

    return("".join(password))



if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 validator.py". This can be useful for
    # testing your implementations by calling them here.

    while True:
        try:
            print(validate(input()))
            # print(generate(int(input())))
        except EOFError:
            break